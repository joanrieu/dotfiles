#!/bin/bash

# ==== systemd ==== #

function sd() {
  systemctl --user "$@"
}

function ps() {
  loginctl user-status $(whoami)
}

# ==== console ==== #

function console-attach() {
  if [ $(tmux list-sessions | wc -l) -gt 0 ]
  then
    exec tmux attach-session
  else
    exec tmux
  fi
}

function console-map-host {
  case "$HOSTNAME" in
    bluethunder)
      echo $1;;
    srv.fififox.net)
      echo $2;;
    ssh)
      echo $3;;
    *)
      echo $3;;
  esac
}

function console-setup-colors {
  # echo the value of PS1
  printf '\[\e[0;%dm\] \\ [\w]\n / \[\e[0m\]\$ ' \
    $(~/.config/control console-map-host 34 32 31 33)
  exec >/dev/null
  tmux set status-bg \
    $(~/.config/control console-map-host blue green red yellow)
}

# ==== X ==== #

function X-login() {
  sd start graphical.target
}

function X-logout() {
  sd stop X
}

function X-shell() {
  termite
}



function X-attach() {
  if session=$(tmux list-sessions -F "#{?session_attached,[,}#{session_name}#{?session_attached,],}" | dmenu | egrep -o [0-9]+)
  then
    termite -e "tmux attach-session -t $session"
  fi
}

function X-launcher() {
  dmenu_run &
}

function X-keyboard() {
  setxkbmap $(setxkbmap -query |awk -F: -e '/layout: +fr/ { print "us" } /layout: +us/ { print "fr" }')
}

function X-taskbar() {
  if sd is-active tint2
  then
    sd stop tint2
  else
    sd start tint2
  fi
}

# ==== Music ==== #

function music-playpause() {
  ncmpcpp play
}

function music-pause() {
  ncmpcpp pause
}

function music-playpause() {
  ncmpcpp toggle
}

function music-stop() {
  ncmpcpp stop
}

function music-next() {
  ncmpcpp next
}

function music-prev() {
  ncmpcpp prev
}

function music-choose() {
  if folder=$(ls ~/music | dmenu -i -p "$(ncmpcpp --now-playing)") &&
    music=$(mpc listall "$folder" | dmenu -i -l 20 -p 'Add to playlist')
  then
    mpc add "$music"
  fi
}

MUSIC_VOLUME_STEP=50

function music-raise() {
  ncmpcpp volume +$MUSIC_VOLUME_STEP
}

function music-lower() {
  ncmpcpp volume -$MUSIC_VOLUME_STEP
}

# ==== Audio ==== #

AUDIO_VOLUME_STEP=10

function audio-raise() {
  ponymix increase -t sink -d speakers $AUDIO_VOLUME_STEP >/dev/null
}

function audio-lower() {
  ponymix decrease -t sink -d speakers $AUDIO_VOLUME_STEP >/dev/null
}

function audio-get() {
  ponymix defaults | awk '$1 == "sink" { print $3 }'
}

function audio-set() {
  device=$1
  skipped_devices=2
  ponymix set-default -t sink -d $device
  $(ponymix list-short -t sink-input | awk '$2 >= '$skipped_devices' { print "ponymix move -t sink-input -d "$2" '$device'" }')
}

function audio-toggle() {
  if [[ $(audio-get) == headphones ]]
  then
    device=speakers
  else
    device=headphones
  fi
  audio-set $device
}

# ==== pacman ==== #

function pacman-find-disowned-files {
  ( sudo find / -not -type d ; (pacman -Qql | egrep -v '/$') ) | sort | uniq -u | egrep -v '^/(home|sys|proc|dev)' | less
}

function pacman-clean-explicits {
  explicits=$(comm -23 <(pacman -Qqe | sort) <(pacman -Sqg base base-devel | sort))
  unneeded=$(LC_ALL=C pacman -Qi $explicits |sed -nre 's/^Name +: (.+)$/\1/p' -e 's/^Description +: (.+)$/\1\noff/p' |xargs -d"\n" dialog --checklist "Select unneeded packages:" 0 0 0 3>&1 1>&2 2>&3)
  if [ -n "$unneeded" ]
  then
    cmd="sudo pacman -D --asdeps $unneeded"
    echo $cmd
    $cmd
  fi
}

# ==== $0 ==== #

function run() {
  command=$1
  shift
  while [[ $(type -t $command) != function ]]
  do
    if [ $# -gt 0 ]
    then
      command="${command}-${1}"
      shift
    else
      echo error: bad command: $command >&2
      exit 1
    fi
  done
  $command "$@"
}

run "$@"
